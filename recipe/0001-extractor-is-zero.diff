diff --git a/binwalk-2.3.4/src/binwalk/modules/extractor.py b/binwalk-2.3.4/src/binwalk/modules/extractor.py
index 4e4660a..9c50097 100644
--- a/src/binwalk/modules/extractor.py
+++ b/src/binwalk/modules/extractor.py
@@ -963,10 +963,10 @@ class Extractor(Module):
         # If a run-as user is not the current user, we'll need to switch privileges to that user account
         if self.runas_uid != os.getuid():
             binwalk.core.common.debug("Switching privileges to %s (%d:%d)" % (self.runas_user, self.runas_uid, self.runas_gid))
-            
+
             # Fork a child process
             child_pid = os.fork()
-            if child_pid is 0:
+            if child_pid == 0:
                 # Switch to the run-as user privileges, if one has been set
                 if self.runas_uid is not None and self.runas_gid is not None:
                     os.setgid(self.runas_uid)
@@ -974,14 +974,14 @@ class Extractor(Module):
         else:
             # child_pid of None indicates that no os.fork() occured
             child_pid = None
-            
+
         # If we're the child, or there was no os.fork(), execute the command
         if child_pid in [0, None]:
             binwalk.core.common.debug("subprocess.call(%s, stdout=%s, stderr=%s)" % (command, str(tmp), str(tmp)))
             rval = subprocess.call(shlex.split(command), stdout=tmp, stderr=tmp)
 
         # A true child process should exit with the subprocess exit value
-        if child_pid is 0:
+        if child_pid == 0:
             sys.exit(rval)
         # If no os.fork() happened, just return the subprocess exit value
         elif child_pid is None:
@@ -993,7 +993,7 @@ class Extractor(Module):
     def symlink_sanitizer(self, file_list, extraction_directory):
         # User can disable this if desired
         if self.do_not_sanitize_symlinks is True:
-            return 
+            return
 
         # Allows either a single file path, or a list of file paths to be passed in for sanitization.
         if type(file_list) is not list:
